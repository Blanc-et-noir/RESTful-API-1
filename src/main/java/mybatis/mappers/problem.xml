<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="problem">
	<select id="getCategories" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT *
		FROM categories
		ORDER BY category_name ASC
	</select>
	
	<select id="checkProblemId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT *
		FROM problems
		WHERE problem_id = #{problem_id}
	</select>

	<select id="checkOpinionId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT *
		FROM opinions
		WHERE problem_id = #{problem_id} AND opinion_id = #{opinion_id}
	</select>
	
	<select id="checkUserId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT *
		FROM opinions
		WHERE problem_id = #{problem_id} AND opinion_id = #{opinion_id} AND user_id = #{user_id}
	</select>
	
	<select id="getProblems" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT t2.problem_id, t2.problem_content, t2.problem_image_name, t2.choice_id, t2.choice_content, t2.choice_yn, IFNULL(t3.pick_rate,0) AS "pick_rate"
		FROM(
			SELECT *
			FROM(
				SELECT *
				FROM problems
				WHERE category_id = #{category_id}
				ORDER BY RAND()
				LIMIT ${limit}
			)AS t1 NATURAL JOIN choices
		)AS t2 LEFT JOIN (
			SELECT DISTINCT problem_id, choice_id, ROUND(COUNT(*) OVER(PARTITION BY problem_id,choice_id)/COUNT(*) OVER(PARTITION BY problem_id),2)*100 AS "pick_rate"
			FROM records
		)AS t3 ON t2.choice_id = t3.choice_id;
	</select>
	
	<select id="getChoices" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT *
		FROM choices
		<where>
			<foreach collection="problems" item="item" open="problem_id IN(" separator="," close=")">
				#{item.problem_id}
			</foreach>
		</where>
	</select>
	
	<select id="getOpinionsTotal" parameterType="java.util.HashMap" resultType="Integer">
		SELECT count(*)
		FROM opinions
		WHERE problem_id = #{problem_id}
	</select>

	<select id="readOpinions" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT opinion_id, problem_id, user_id,user_name, opinion_content, DATE_FORMAT(opinion_date,'%Y-%m-%d %T') AS opinion_date, IF(user_id=#{user_id},'true','false') AS editable
		FROM opinions NATURAL JOIN users
		WHERE problem_id = #{problem_id}
		ORDER BY opinion_date DESC
		LIMIT 5 OFFSET ${offset}
	</select>
	
	<select id="getChoicesInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT *
		FROM choices
		<where>
			<foreach collection="list" item="item" open="(problem_id,choice_id) IN(" separator="," close=")">
				(#{item.problem_id},#{item.answer_id})
			</foreach>
		</where>
	</select>
	
	<update id="updateOpinion" parameterType="java.util.HashMap">
		UPDATE opinions
		SET opinion_content = #{opinion_content}
		WHERE problem_id = #{problem_id} AND opinion_id = #{opinion_id} AND user_id = #{user_id}
	</update>
		
	<insert id="insertRecords" parameterType="java.util.HashMap">
		INSERT INTO records(problem_id,choice_id,user_id) VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.problem_id},#{item.answer_id},#{item.user_id})
		</foreach>
	</insert>
	
	<insert id="writeOpinion" parameterType="java.util.HashMap">
		INSERT INTO opinions(problem_id,user_id,opinion_content) VALUES(#{problem_id},#{user_id},#{opinion_content})
	</insert>
	
	<delete id="deleteOpinion" parameterType="java.util.HashMap">
		DELETE
		FROM opinions
		WHERE problem_id = #{problem_id} AND opinion_id = #{opinion_id} AND user_id = #{user_id}
	</delete>
</mapper>